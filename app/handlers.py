from idlelib.rpc import response_queue

from aiogram import Bot
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BotCommand
from aiogram.filters import CommandStart, Command
import requests
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from dotenv import load_dotenv
import os

from sqlalchemy.util import await_only

from config import API_KEY

import database.requests as rq

import keyboards.inline as inl

from state import Team, Player, Grid_main, Transfers

router = Router()

async def get_football_data(endpoint, params=None):
    url = f"https://v3.football.api-sports.io/{endpoint}"
    headers = {
        'x-rapidapi-host': 'v3.football.api-sports.io',
        'x-rapidapi-key': API_KEY
    }
    response = requests.get(url, headers=headers, params=params)
    return response.json()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—É—Ç–±–æ–ª–µ.", reply_markup=inl.main)

@router.callback_query(F.data == 'again_main')
async def main(callback: CallbackQuery):
    await callback.message.edit_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—É—Ç–±–æ–ª–µ.", reply_markup=inl.main)



@router.callback_query(F.data == 'get_team')
async def get_team(callback: CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ.')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –≤ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ:', reply_markup=inl.team)

@router.callback_query(F.data == 'get_structure')
async def get_stcructure(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ —Å–æ—Å—Ç–∞–≤–∞.')
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:')
    await state.set_state(Team.strucrture)

@router.message(Team.strucrture)
async def structure(message: Message, state: FSMContext):
    team_name = message.text
    data = await get_football_data('teams', {'search': team_name})
    if not data.get('response'):
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=inl.main_again)
        return
    teams = data['response']
    team_id = teams[0]['team']['id']
    players = await get_football_data('players/squads', {'team': team_id})
    squad = players['response'][0]['players']
    response_text = f"–ò–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã {teams[0]['team']['name']}: \n"
    for player in squad:
        player_name = player['name']
        player_position = player['position']
        player_number = player['number']
        response_text += f"–ò–º—è: {player_name}, –ø–æ–∑–∏—Ü–∏—è: {player_position}, –Ω–æ–º–µ—Ä: {player_number}\n"
    await message.reply(response_text)
    await state.clear()

@router.callback_query(F.data == 'to_main')
async def main(callback: CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é.')
    await callback.message.edit_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—É—Ç–±–æ–ª–µ.", reply_markup=inl.main)

@router.callback_query(F.data == 'get_info')
async def ask_team_info(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ —Ç—Ä–æ—Ñ–µ–µ–≤ –∫–æ–º–∞–Ω–¥—ã")
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞–¥—ã: ")
    await state.set_state(Team.info)

@router.message(Team.info)
async def info(message: Message, state: FSMContext):
    team_name = message.text
    data = await get_football_data('teams', {'search': team_name})

    if not data.get('response'):
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=inl.main_again)
        return
    teams = data['response']
    team_id = teams[0]['team']['id']
    info_data = await get_football_data('teams', {'id': team_id})
    info_name = info_data['response'][0]['team']['name']
    info_founded = info_data['response'][0]['team']['founded']
    info_country = info_data['response'][0]['team']['country']
    info_logo = info_data['response'][0]['team']['logo']
    info_venue_name = info_data['response'][0]['venue']['name']
    info_venue_city = info_data['response'][0]['venue']['city']
    info_venue_logo = info_data['response'][0]['venue']['image']
    response_text_team = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ "{info_data['response'][0]['team']['name']}": \n'
    response_text_team += (f'–ö–æ–º–∞–Ω–¥–∞ "{info_data['response'][0]['team']['name']}" –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ {info_founded}.\n–ú–µ—Å—Ç–æ: {info_country}\n')
    response_text_venue = (f'–î–æ–º–∞—à–Ω—è—è –∞—Ä–µ–Ω–∞: {info_venue_name}\n–ì–æ—Ä–æ–¥ –¥–æ–º–∞—à–Ω–µ–π –∞—Ä–µ–Ω—ã: {info_venue_city}')
    await message.answer(response_text_team)
    await message.answer_photo(info_logo, caption=f"–õ–æ–≥–æ—Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã {info_data['response'][0]['team']['name']}")
    await message.answer(response_text_venue)
    await message.answer_photo(info_venue_logo, caption=f"–§–æ—Ç–æ –¥–æ–º–∞—à–Ω–µ–π –∞—Ä–µ–Ω—ã {info_data['response'][0]['team']['name']}")
    await state.clear()

@router.callback_query(F.data == 'get_player')
async def get_player(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –ø–æ –∏–≥—Ä–æ–∫—É")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ –∏–≥—Ä–æ–∫—É.", reply_markup=inl.player)

@router.callback_query(F.data == 'get_player_info')
async def player_info(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏ –ø–æ –∏–≥—Ä–æ–∫—É")
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏–≥—Ä–æ–∫–∞: ")
    await state.set_state(Player.info)

@router.message(Player.info)
async def info_player(message: Message, state:FSMContext):
    player_text = message.text
    player_name = await get_football_data('players/profiles', {'search': player_text})
    players_dict = {}
    cnt = 0
    if not player_name.get('response'):
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–µ–π –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=inl.main_again)
        return

    await message.answer('–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å –ø–æ—Ö–æ–∂–µ–π —Ñ–∞–º–∏–ª–∏–µ–π: ')
    for player in player_name['response']:
        cnt += 1
        response_text = f"{cnt}. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ {player['player']['name']}: \n"
        response_text += f"üë§ –ò–º—è: {player['player']['name']} –§–∞–º–∏–ª–∏—è: {player['player']['lastname']}\n"
        response_text += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {player['player']['age']}\n"
        response_text += f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {player['player']['birth']['date']}\n"
        response_text += f"üåç –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {player['player']['birth']['country']} {player['player']['birth']['place']}\n"
        players_dict[cnt] = player['player']['id']


        await message.answer(response_text)
    await state.clear()



@router.callback_query(F.data == 'get_standings')
async def get_standings(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –ø–æ —Ç–∞–±–ª–∏—Ü–µ –∫–æ–º–∞–Ω–¥.")
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å.', reply_markup=inl.main_standings)

@router.callback_query(F.data == 'grid')
async def grid(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –ø–æ –æ–±—â–µ–π —Å–µ—Ç–∫–µ.")
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏–≥–∏ –∏ —Å–µ–∑–æ–Ω (–ø—Ä–∏–º–µ—Ä: Premier League,2022)\n"
                                     "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞—à –±–æ—Ç —É–º–µ–µ—Ç –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ —Å 2021 –ø–æ 2023 –≥–æ–¥ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.")
    await state.set_state(Grid_main.grid)

@router.message(Grid_main.grid)
async def grid_main(message: Message, state: FSMContext):
    mes = message.text.split(',')
    league = await get_football_data('leagues', {'name': mes[0]})
    if not league.get('response'):
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é.", reply_markup=inl.main_again)
    league_id = league['response'][0]['league']['id']
    season = mes[1]
    standings = await get_football_data('standings', {'league': league_id, 'season': season})

    if not standings.get('response'):
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é.", reply_markup=inl.main_again)
    response_text = f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—á–Ω–æ–π —Å–µ—Ç–∫–∏ {standings['response'][0]['league']['name']} {standings['response'][0]['league']['season']} –≥–æ–¥–∞.\n'
    for team in standings['response'][0]['league']['standings'][0]:
        if team['all']['win'] and team['all']['lose'] and team['all']['draw']:
            response_text += (f"{team['rank']}-e –º–µ—Å—Ç–æ: {team['team']['name']}. –û—á–∫–æ–≤: {team['points']}. –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {team['all']['played']} (–ü–æ–±–µ–¥: {team['all']['win']},"
                              f" –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {team['all']['lose']}, –ù–∏—á—å—è: {team['all']['draw']})\n")
        elif team['all']['win'] and team['all']['lose']:
            response_text += (
                f"{team['rank']}-e –º–µ—Å—Ç–æ: {team['team']['name']}. –û—á–∫–æ–≤: {team['points']}. –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {team['all']['played']} (–ü–æ–±–µ–¥: {team['all']['win']},"
                f" –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {team['all']['lose']}\n)")
        elif team['all']['win'] and team['all']['draw']:
            response_text += (
                f"{team['rank']}-e –º–µ—Å—Ç–æ: {team['team']['name']}. –û—á–∫–æ–≤: {team['points']}. –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {team['all']['played']} (–ü–æ–±–µ–¥: {team['all']['win']},"
                f" –ù–∏—á—å—è: {team['all']['draw']})\n")
        elif team['all']['lose']:
            response_text += (
                f"{team['rank']}-e –º–µ—Å—Ç–æ: {team['team']['name']}. –û—á–∫–æ–≤: {team['points']}. –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {team['all']['played']} ("
                f"–ü–æ—Ä–∞–∂–µ–Ω–∏–π: {team['all']['lose']})\n")
        elif team['all']['lose'] and team['all']['draw']:
            response_text += (
                f"{team['rank']}-e –º–µ—Å—Ç–æ: {team['team']['name']}. –û—á–∫–æ–≤: {team['points']}. –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {team['all']['played']} ("
                f"–ü–æ—Ä–∞–∂–µ–Ω–∏–π: {team['all']['lose']}, –ù–∏—á—å—è: {team['all']['draw']})\n")
        elif team['all']['win']:
            response_text += (
                f"{team['rank']}-e –º–µ—Å—Ç–æ: {team['team']['name']}. –û—á–∫–æ–≤: {team['points']}. –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {team['all']['played']} (–ü–æ–±–µ–¥: {team['all']['win']}"
                f")\n")
        else:
            response_text += (
                f"{team['rank']}-e –º–µ—Å—Ç–æ: {team['team']['name']}. –û—á–∫–æ–≤: {team['points']}. –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {team['all']['played']} ("
                f"–ù–∏—á—å—è: {team['all']['draw']})\n")
    await message.answer(response_text)
    await state.clear()

@router.callback_query(F.data == 'team_in_grid')
async def team_grid(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ –≤ —Å–µ—Ç–∫–µ.")
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏–≥–∏, —Å–µ–∑–æ–Ω –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–ø—Ä–∏–º–µ—Ä: La Liga,2021,Barcelona)\n"
                                     "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞—à –±–æ—Ç —É–º–µ–µ—Ç –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ —Å 2021 –ø–æ 2023 –≥–æ–¥ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.")
    await state.set_state(Grid_main.team_grid)

@router.message(Grid_main.team_grid)
async def find_grid(message: Message, state: FSMContext):
    text = message.text.split(',')
    league = await get_football_data('leagues', {'name': text[0]})
    if not league.get('response'):
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é.",
            reply_markup=inl.main_again)
    league_id = league['response'][0]['league']['id']
    team = await get_football_data('teams', {'name': text[2]})
    team_id = team['response'][0]['team']['id']
    if not team.get('response'):
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é.",
            reply_markup=inl.main_again)
    season = text[1]
    standings = await get_football_data('standings', {'league': league_id, 'season': season, 'team': team_id})
    if not standings.get('response'):
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é.", reply_markup=inl.main_again)
    response_text = (f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã {team['response'][0]['team']['name']} –≤ —Ç–∞–±–ª–∏—á–Ω–æ–π —Å–µ—Ç–∫–∏ {standings['response'][0]['league']['name']}'
                     f' {standings['response'][0]['league']['season']} –≥–æ–¥–∞:\n')
    response_text += f"üèÜ –ú–µ—Å—Ç–æ: {standings['response'][0]['league']['standings'][0][0]['rank']}\n"
    response_text += f"üìà –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {standings['response'][0]['league']['standings'][0][0]['points']}\n"
    response_text += f"‚öΩ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {standings['response'][0]['league']['standings'][0][0]['all']['played']}\n"
    if standings['response'][0]['league']['standings'][0][0]['all']['win']:
        response_text += f"üéâ –ü–æ–±–µ–¥: {standings['response'][0]['league']['standings'][0][0]['all']['win']}\n"
    if standings['response'][0]['league']['standings'][0][0]['all']['lose']:
        response_text += f"üÜò –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {standings['response'][0]['league']['standings'][0][0]['all']['lose']}\n"
    if standings['response'][0]['league']['standings'][0][0]['all']['draw']:
        response_text += f"ü§õüèª –ù–∏—á—å—è: {standings['response'][0]['league']['standings'][0][0]['all']['draw']}\n"
    response_text += f"‚öΩ –í—Å–µ–≥–æ –∑–∞–±–∏—Ç–æ: {standings['response'][0]['league']['standings'][0][0]['all']['goals']['for']}\n"
    response_text += f"üîò –ü—Ä–æ–ø—É—â–µ–Ω–æ –≥–æ–ª–æ–≤: {standings['response'][0]['league']['standings'][0][0]['all']['goals']['against']}\n"
    await message.answer(response_text)
    await state.clear()

@router.callback_query(F.data == 'get_transfer')
async def get_transfer(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –ø–æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—É.")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.", reply_markup=inl.transfer)

@router.callback_query(F.data == 'player_transfer')
async def get_player_transfer(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –ø–æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—É –∏–≥—Ä–æ–∫–∞.")
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏–≥—Ä–æ–∫–∞:")
    await state.set_state(Transfers.ask_transfer)

@router.message(Transfers.ask_transfer)
async def info_transfer(message: Message, state: FSMContext):
    player_text = message.text
    player_name = await get_football_data('players/profiles', {'search': player_text})
    players_dict = {}
    cnt = 0
    if not player_name.get('response'):
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–µ–π –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=inl.main_again)
        return

    await message.answer('–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å –ø–æ—Ö–æ–∂–µ–π —Ñ–∞–º–∏–ª–∏–µ–π: ')
    for player in player_name['response']:
        cnt += 1
        response_text = f"{cnt}. {player['player']['name']} {player['player']['lastname']} \n"
        players_dict[str(cnt)] = player['player']['id']
        await message.answer(response_text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞ –ø–æ —Å–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ–≥–æ —Ç—Ä–∞—Å–Ω—Ñ–µ—Ä.")
    await state.update_data(players_dict=players_dict)
    await state.set_state(Transfers.transfer)

@router.message(Transfers.transfer)
async def transfer2(message: Message, state: FSMContext):
    text = message.text
    data = await state.get_data()
    players_dict = data.get('players_dict', {})
    name_football = await get_football_data('players/profiles', {'player': players_dict[text]})
    name_player = name_football['response'][0]['player']['name']


    if not players_dict:
        await message.answer("–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    transfer_info = await get_football_data('transfers', {'player': players_dict[text]})
    sorted_transfers = sorted(transfer_info['response'][0]["transfers"], key=lambda x: x["date"])
    response_text = f"–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤ –∏–≥—Ä–æ–∫–∞ {name_player}: \n"
    for transfer in sorted_transfers:
        response_text += f'{transfer['teams']['out']['name']} ‚Üí {transfer['teams']['in']['name']}. –î–∞—Ç–∞: {transfer['date']} –°—É–º–º–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: {transfer['type']} \n'
    await message.answer(response_text)
    await state.clear()

@router.callback_query(F.data == "team_transfer")
async def transfer_team(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ —Ç—Ä–∞–Ω—Å–µ—Ä—Ñ–æ–≤ –∫–æ–º–∞–Ω–¥—ã.")
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é –µ–µ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤.")
    await state.set_state(Transfers.team_transfer)

@router.message(Transfers.team_transfer)
async def info_team_transfer(message: Message, state: FSMContext):
    cnt = 0
    text = message.text
    team = await get_football_data('teams', {'name': text})
    if not team:
        await message.answer("–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    team_id = team['response'][0]['team']['id']
    transfer_team = await get_football_data('transfers', {'team': team_id})
    response_text = f'–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã {text} \n:'
    for player in transfer_team['response']:
        cnt += 1
        response_text += f"–ò–≥—Ä–æ–∫ {player['player']['name']} –≤ {player['transfers'][0]['teams']['in']['name']} –∑–∞ {player['transfers'][0]['type']} –î–∞—Ç–∞: {player['transfers'][0]['date']}\n"
        if cnt == 10:
            break
    await message.answer(response_text)
    await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –º–æ–∂–µ–º –≤—ã–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤, —Ç–∞–∫ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.')
    await state.clear()






























